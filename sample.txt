import React, { useState } from 'react';
import { Star, MapPin, TrendingUp, RefreshCw, Building2, Loader2 } from 'lucide-react';

const BusinessDashboard = () => {
  const [formData, setFormData] = useState({
    name: '',
    location: ''
  });
  const [businessData, setBusinessData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isRegenerating, setIsRegenerating] = useState(false);
  const [errors, setErrors] = useState({});

  // Simulated backend API calls
  const fetchBusinessData = async (name, location) => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const headlines = [
      `Why ${name} is ${location}'s Best Kept Secret in 2025`,
      `Discover ${name}: ${location}'s Premier Destination`,
      `${name} - Transforming ${location}'s Local Scene`,
      `The Ultimate Guide to ${name} in ${location}`,
      `${name}: Where ${location} Meets Excellence`,
      `Unveiling ${name} - ${location}'s Hidden Gem`
    ];
    
    const ratings = [4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8];
    const reviewCounts = [89, 127, 156, 203, 234, 289, 345, 412];
    
    return {
      rating: ratings[Math.floor(Math.random() * ratings.length)],
      reviews: reviewCounts[Math.floor(Math.random() * reviewCounts.length)],
      headline: headlines[Math.floor(Math.random() * headlines.length)]
    };
  };

  const regenerateHeadline = async (name, location) => {
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const headlines = [
      `${name}: Your Next Favorite Spot in ${location}`,
      `Breaking: ${name} Takes ${location} by Storm`,
      `${name} - Redefining Excellence in ${location}`,
      `The Rise of ${name} in ${location}'s Market`,
      `${name}: Leading Innovation in ${location}`,
      `How ${name} Became ${location}'s Talk of the Town`
    ];
    
    return headlines[Math.floor(Math.random() * headlines.length)];
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.name.trim()) {
      newErrors.name = 'Business name is required';
    }
    
    if (!formData.location.trim()) {
      newErrors.location = 'Location is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsLoading(true);
    setErrors({});
    
    try {
      const data = await fetchBusinessData(formData.name, formData.location);
      setBusinessData(data);
    } catch (error) {
      console.error('Error fetching business data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegenerateHeadline = async () => {
    if (!businessData) return;
    
    setIsRegenerating(true);
    
    try {
      const newHeadline = await regenerateHeadline(formData.name, formData.location);
      setBusinessData(prev => ({
        ...prev,
        headline: newHeadline
      }));
    } catch (error) {
      console.error('Error regenerating headline:', error);
    } finally {
      setIsRegenerating(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-green-50 to-emerald-50 p-4">
      {/* Background Elements */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-green-100 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-pulse"></div>
        <div className="absolute top-3/4 right-1/4 w-96 h-96 bg-emerald-100 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-pulse"></div>
        <div className="absolute top-1/2 left-1/2 w-72 h-72 bg-green-200 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
      </div>
      
      <div className="relative z-10 max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 bg-white/80 backdrop-blur-lg rounded-xl border border-green-200 shadow-lg">
              <Building2 className="w-8 h-8 text-green-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-800">Business Dashboard</h1>
          </div>
          <p className="text-gray-600 text-lg">Discover your local business insights and SEO potential</p>
        </div>

        {/* Input Form */}
        <div className="bg-white/80 backdrop-blur-lg rounded-2xl border border-green-200 p-8 mb-8 shadow-lg">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
            <TrendingUp className="w-6 h-6 text-green-600" />
            Business Information
          </h2>
          
          <div className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Business Name
                </label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-3 bg-white/90 backdrop-blur-sm border ${
                    errors.name ? 'border-red-400' : 'border-gray-300'
                  } rounded-xl text-gray-800 placeholder-gray-500 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-200 transition-all duration-300`}
                  placeholder="Enter your business name"
                />
                {errors.name && (
                  <p className="mt-1 text-sm text-red-500">{errors.name}</p>
                )}
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Location
                </label>
                <input
                  type="text"
                  name="location"
                  value={formData.location}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-3 bg-white/90 backdrop-blur-sm border ${
                    errors.location ? 'border-red-400' : 'border-gray-300'
                  } rounded-xl text-gray-800 placeholder-gray-500 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-200 transition-all duration-300`}
                  placeholder="Enter your location"
                />
                {errors.location && (
                  <p className="mt-1 text-sm text-red-500">{errors.location}</p>
                )}
              </div>
            </div>
            
            <button
              onClick={handleSubmit}
              disabled={isLoading}
              className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white font-medium py-3 px-6 rounded-xl hover:from-green-600 hover:to-emerald-700 focus:outline-none focus:ring-2 focus:ring-green-300 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2 shadow-md"
            >
              {isLoading ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  Analyzing Business...
                </>
              ) : (
                'Get Business Insights'
              )}
            </button>
          </div>
        </div>

        {/* Display Card */}
        {businessData && (
          <div className="relative">
            {/* Overlay Blur while regenerating */}
            {isRegenerating && (
              <div className="absolute inset-0 z-20 backdrop-blur-sm bg-white/40 rounded-2xl border border-green-200 flex items-center justify-center transition-all duration-300">
                <Loader2 className="w-6 h-6 text-green-600 animate-spin" />
              </div>
            )}

            {/* Content Wrapper */}
            <div
              className={`bg-white/80 backdrop-blur-lg rounded-2xl border border-green-200 p-8 shadow-lg animate-in fade-in-50 slide-in-from-bottom-4 duration-500 ${
                isRegenerating ? 'opacity-60 pointer-events-none' : ''
              }`}
            >
              {/* Header */}
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-semibold text-gray-800 flex items-center gap-2">
                  <Star className="w-6 h-6 text-yellow-500" />
                  Business Analytics
                </h2>
                <div className="flex items-center gap-2 text-gray-600">
                  <MapPin className="w-4 h-4" />
                  <span className="text-sm">{formData.location}</span>
                </div>
              </div>

              {/* Cards */}
              <div className="grid md:grid-cols-3 gap-6 mb-8">
                <div className="bg-white/90 backdrop-blur-sm rounded-xl border border-green-200 p-6 text-center shadow-sm">
                  <div className="flex items-center justify-center gap-1 mb-2">
                    <Star className="w-5 h-5 text-yellow-500 fill-current" />
                    <span className="text-2xl font-bold text-gray-800">{businessData.rating}</span>
                  </div>
                  <p className="text-gray-600 text-sm">Google Rating</p>
                </div>

                <div className="bg-white/90 backdrop-blur-sm rounded-xl border border-green-200 p-6 text-center shadow-sm">
                  <div className="text-2xl font-bold text-gray-800 mb-2">{businessData.reviews}</div>
                  <p className="text-gray-600 text-sm">Total Reviews</p>
                </div>

                <div className="bg-white/90 backdrop-blur-sm rounded-xl border border-green-200 p-6 text-center shadow-sm">
                  <div className="text-lg font-semibold text-gray-800 mb-2 truncate">{formData.name}</div>
                  <p className="text-gray-600 text-sm">Business Profile</p>
                </div>
              </div>

              {/* Headline */}
              <div className="bg-gradient-to-r from-green-50 to-emerald-50 backdrop-blur-sm rounded-xl border border-green-200 p-6 shadow-sm">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-800">AI-Generated SEO Headline</h3>
                  <button
                    onClick={handleRegenerateHeadline}
                    disabled={isRegenerating}
                    className="bg-white/90 hover:bg-white backdrop-blur-sm text-gray-700 px-4 py-2 rounded-lg border border-green-200 transition-all duration-300 flex items-center gap-2 text-sm disabled:opacity-50 disabled:cursor-not-allowed shadow-sm"
                  >
                    <RefreshCw className={`w-4 h-4 ${isRegenerating ? 'animate-spin' : ''}`} />
                    {isRegenerating ? 'Generating...' : 'Regenerate'}
                  </button>
                </div>
                <p className="text-gray-700 text-lg leading-relaxed">{businessData.headline}</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default BusinessDashboard;